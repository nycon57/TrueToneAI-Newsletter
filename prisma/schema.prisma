// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// User model represents application users and their profile information
/// Maps to "users" table in the database
model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique identifier for the user - auto-generated UUID
  name      String @default("Not Set")     /// Full display name of the user - defaults to "Not Set" for existing records
  firstName String @default("Not Set")     /// User's first name - defaults to "Not Set" for existing records
  lastName  String @default("Not Set")     /// User's last name - defaults to "Not Set" for existing records
  email     String   @unique               /// User's email address - must be unique across all users
  company   String?                        /// Optional company name where the user works
  avatar    String?                        /// URL to user profile avatar image stored in Supabase Storage
  createdAt DateTime @default(now())       /// Timestamp when the user account was created
  updatedAt DateTime @updatedAt            /// Timestamp when the user record was last updated

  // Authentication fields
  kindeId             String?  @unique @map("kinde_id")              /// Kinde authentication provider ID - unique identifier from Kinde

  // User preferences
  categoryPreferences String[] @default([]) @map("category_preferences") /// User's preferred content categories
  savedArticleIds     String[] @default([]) @map("saved_article_ids")    /// IDs of articles saved by the user

  // Subscription fields
  subscriptionTier        SubscriptionTier @default(FREE)  @map("subscription_tier")         /// User's subscription level
  subscriptionStatus      String?                          @map("subscription_status")        /// Current subscription status (active, trialing, canceled, etc.)
  subscriptionExpiresAt   DateTime?                        @map("subscription_expires_at")    /// When subscription expires
  subscriptionCreatedAt   DateTime?                        @map("subscription_created_at")    /// When subscription was created
  monthlyGenerationLimit  Int              @default(3)     @map("monthly_generation_limit")  /// Max AI generations per month
  monthlyGenerationsUsed  Int              @default(0)     @map("monthly_generations_used")  /// AI generations used this month
  generationResetDate     DateTime?        @default(now()) @db.Date @map("generation_reset_date") /// Date when monthly count resets

  // Stripe integration fields
  stripeCustomerId        String?          @unique @map("stripe_customer_id")      /// Stripe customer ID for billing
  stripeSubscriptionId    String?          @unique @map("stripe_subscription_id")  /// Stripe subscription ID
  stripePriceId           String?                  @map("stripe_price_id")         /// Stripe price ID for the subscription

  // Onboarding fields
  hasCompletedOnboarding  Boolean          @default(false) @map("has_completed_onboarding") /// Whether user has completed onboarding flow
  onboardingStep          Int?             @default(1)     @map("onboarding_step")          /// Current onboarding step (1-6)
  onboardingCompletedAt   DateTime?                        @map("onboarding_completed_at")  /// When onboarding was completed

  // Relations
  likes                   Like[]             /// User's likes on various content
  sessions                UserSession[]      /// User's analytics sessions
  events                  AnalyticsEvent[]   /// User's tracked events
  pageViews               PageView[]         /// User's page view history
  chatAnalytics           ChatAnalytics[]    /// User's AI chat usage analytics
  createdArticles         Article[]          @relation("ArticleCreator")     /// Articles created by this admin user
  editedArticles          Article[]          @relation("ArticleEditor")      /// Articles last edited by this admin user
  personalizations        PersonalizedOutput[] /// User's personalized content outputs

  // Indexes for performance
  @@index([kindeId])
  @@map("users")
}

/// Enum defining the different publication states for posts
/// Used to control post visibility and workflow
enum PublishedStatus {
  DRAFT     /// Post is in draft mode - not visible to public
  PUBLISHED /// Post is published and visible to public
  ARCHIVED  /// Post is archived - no longer active but preserved
}

/// Post model represents newsletter posts and articles
/// Contains rich JSON content and publication workflow
/// Maps to "newsletter_posts" table in the database
model Post {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique identifier for the post - auto-generated UUID
  title           String                                                                   /// Title of the post - displayed as headline
  content         Json            @db.JsonB                                                /// Rich content stored as JSON
  publishedStatus PublishedStatus @default(DRAFT)                                         /// Current publication status of the post - defaults to DRAFT
  publishedAt     DateTime?                                                                /// Timestamp when the post was published (null if never published)
  createdAt       DateTime        @default(now())                                         /// Timestamp when the post was created
  updatedAt       DateTime        @updatedAt                                              /// Timestamp when the post was last updated
  
  // Relations
  likes           Like[]                                                                   /// Likes on this post and its content
  
  @@map("newsletter_posts")
}

/// Enum defining different types of content that can be liked
enum ContentType {
  ARTICLE         /// Main article content
  KEY_INSIGHTS    /// Key insights section
  VIDEO_SCRIPT    /// Video script section
  EMAIL_TEMPLATE  /// Email template section
  SOCIAL_CONTENT  /// Social media content section
}

/// Enum defining device types for analytics
enum Device {
  MOBILE   /// Mobile device
  TABLET   /// Tablet device
  DESKTOP  /// Desktop computer
  UNKNOWN  /// Unknown device type
}

/// Enum defining subscription tiers
enum SubscriptionTier {
  FREE     /// Free tier with limited features
  PAID     /// Paid tier with personalization
  PREMIUM  /// Premium tier with advanced features
}

/// Enum defining article status
enum ArticleStatus {
  DRAFT     /// Article is in draft mode
  PUBLISHED /// Article is published and visible
  ARCHIVED  /// Article is archived
}

/// Like model represents user engagement with content
/// Tracks likes on articles and specific content sections
/// Maps to "likes" table in the database
model Like {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique identifier for the like
  userId       String      @db.Uuid                                                /// ID of the user who liked
  postId       String      @db.Uuid                                                /// ID of the post containing the content
  contentId    String                                                              /// Stable contentID from the JSONB content
  contentType  ContentType                                                         /// Type of content being liked
  contentTitle String                                                              /// Human-readable title of the liked content
  deviceType   Device      @default(UNKNOWN)                                       /// Device type used when liking
  timestamp    DateTime    @default(now())                                         /// When the like was created
  
  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Constraints and indexes
  @@unique([userId, postId, contentId, contentType])  /// Prevent duplicate likes
  @@index([postId, contentType])                      /// Fast lookup by post and content type
  @@index([userId])                                    /// Fast lookup by user
  @@index([timestamp])                                 /// For time-based analytics
  @@map("likes")
}

/// User session tracking for analytics and user journey insights
/// Maps to "user_sessions" table in the database
model UserSession {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique session identifier
  userId         String?   @db.Uuid                                                /// Associated user (null for anonymous sessions)
  sessionId      String    @unique @db.Uuid                                       /// Client-generated session ID
  ipAddress      String?                                                           /// User's IP address for geolocation
  userAgent      String?                                                           /// Browser/device user agent string
  deviceType     Device    @default(UNKNOWN)                                       /// Detected device type
  countryCode    String?   @db.Char(2)                                             /// ISO country code from IP
  region         String?                                                           /// State/region from IP geolocation
  city           String?                                                           /// City from IP geolocation
  startedAt      DateTime  @default(now())                                         /// Session start timestamp
  lastActiveAt   DateTime  @default(now())                                         /// Last activity timestamp
  endedAt        DateTime?                                                         /// Session end timestamp (null if active)
  pageViews      Int       @default(0)                                             /// Number of page views in session
  eventsCount    Int       @default(0)                                             /// Total events tracked in session
  
  // Relations
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events         AnalyticsEvent[]
  pageViewsRel   PageView[]
  chatSessions   ChatAnalytics[]
  
  // Indexes for performance
  @@index([sessionId])                                /// Fast session lookup
  @@index([userId])                                   /// User session history
  @@index([startedAt])                                /// Time-based queries
  @@index([countryCode])                              /// Geographic analytics
  @@map("user_sessions")
}

/// Comprehensive event tracking for user interactions and system events
/// Maps to "analytics_events" table in the database
model AnalyticsEvent {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique event identifier
  sessionId     String      @db.Uuid                                                /// Session this event belongs to
  userId        String?     @db.Uuid                                                /// User who triggered event (null for anonymous)
  eventType     String                                                              /// Type of event (click, view, scroll, etc.)
  eventAction   String                                                              /// Specific action taken
  eventCategory String?                                                             /// Event category for grouping
  eventLabel    String?                                                             /// Additional event descriptor
  eventValue    Decimal?                                                            /// Numeric value associated with event
  pagePath      String?                                                             /// Page where event occurred
  elementId     String?                                                             /// DOM element ID that triggered event
  elementType   String?                                                             /// Type of element (button, link, etc.)
  metadata      Json?       @db.JsonB                                               /// Additional event data
  timestamp     DateTime    @default(now())                                         /// Event timestamp
  
  // Relations
  session       UserSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes for analytics queries
  @@index([sessionId])                                /// Session-based analytics
  @@index([userId])                                   /// User behavior analytics
  @@index([eventType, eventAction])                   /// Event type analytics
  @@index([pagePath])                                 /// Page-based analytics
  @@index([timestamp])                                /// Time-series analytics
  @@index([eventCategory, timestamp])                 /// Category-based trending
  @@map("analytics_events")
}

/// Page view tracking with detailed engagement metrics
/// Maps to "page_views" table in the database
model PageView {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique page view identifier
  sessionId    String      @db.Uuid                                                /// Session this page view belongs to
  userId       String?     @db.Uuid                                                /// User who viewed page (null for anonymous)
  pagePath     String                                                              /// Full page path/URL
  pageTitle    String?                                                             /// Page title
  referrer     String?                                                             /// Referring page/source
  timeOnPage   Int?                                                                /// Time spent on page (seconds)
  scrollDepth  Int?                                                                /// Maximum scroll depth (percentage)
  exitPage     Boolean     @default(false)                                         /// Whether user exited from this page
  bounce       Boolean     @default(false)                                         /// Whether this was a bounce (single page session)
  timestamp    DateTime    @default(now())                                         /// Page view timestamp
  
  // Relations
  session      UserSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes for page analytics
  @@index([sessionId])                                /// Session page flow
  @@index([userId])                                   /// User page history
  @@index([pagePath])                                 /// Page popularity analytics
  @@index([timestamp])                                /// Time-based page analytics
  @@index([referrer])                                 /// Traffic source analytics
  @@map("page_views")
}

/// AI chat analytics for conversation tracking and usage insights
/// Maps to "chat_analytics" table in the database
model ChatAnalytics {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique chat session identifier
  sessionId           String      @db.Uuid                                                /// User session this chat belongs to
  userId              String?     @db.Uuid                                                /// User who participated in chat (null for anonymous)
  conversationId      String                                                              /// Client-generated conversation ID
  messageCount        Int         @default(0)                                             /// Number of messages in conversation
  sessionDuration     Int?                                                                /// Chat session duration (seconds)
  selectedArticle     String?                                                             /// Article context for chat
  selectedContentType String?                                                             /// Content type being discussed
  tokensUsed          Int?                                                                /// AI tokens consumed
  errorCount          Int         @default(0)                                             /// Number of errors in session
  startedAt           DateTime    @default(now())                                         /// Chat session start
  endedAt             DateTime?                                                           /// Chat session end (null if active)
  
  // Relations
  session             UserSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  user                User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes for chat analytics
  @@index([sessionId])                                /// Session chat history
  @@index([userId])                                   /// User chat behavior
  @@index([conversationId])                           /// Conversation lookup
  @@index([selectedArticle])                          /// Article-based chat analytics
  @@index([startedAt])                                /// Time-based chat analytics
  @@map("chat_analytics")
}

/// Article model represents team-curated content with default outputs
/// Maps to "articles" table in the database
model Article {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique identifier for the article
  title       String                                                                 /// Article title
  summary     String?                                                                /// Article summary
  content     String?                                                                /// Main article body content
  contentType String        @default("article")                                      /// Type of content (article, ad, etc.)
  articleTopic String?                                                               /// Topic category
  category    String?                                                                /// Article category
  tags        String[]      @default([])                                             /// Article tags

  // Default outputs for free tier users
  defaultKeyInsights   String[]    @default([])                                      /// Default key insights
  defaultVideoScript   String?                                                       /// Default video script
  defaultEmailTemplate String?                                                       /// Default email template
  defaultSocialContent Json?       @db.JsonB                                         /// Default social media content

  // Metadata
  position     Int           @default(1)                                             /// Display position
  imageUrl     String?                                                               /// Article image URL
  sourceUrl    String?                                                               /// Source URL for reference
  metadata     Json?         @db.JsonB                                               /// Additional metadata

  // Status and publishing
  status       ArticleStatus @default(DRAFT)                                         /// Article status
  publishedAt  DateTime?                                                             /// When article was published
  createdAt    DateTime      @default(now())                                         /// When article was created
  updatedAt    DateTime      @updatedAt                                              /// When article was last updated

  // Review tracking
  submittedAt     DateTime?                                                          /// When article was submitted for review
  reviewedAt      DateTime?                                                          /// When article was reviewed by admin
  rejectionReason String?                                                            /// Reason for rejection (if applicable)
  reviewNotes     String?                                                            /// Admin notes on the article review

  // Admin relations
  createdByAdminId    String?  @db.Uuid                                              /// Admin who created the article
  lastEditedByAdminId String?  @db.Uuid                                              /// Admin who last edited the article
  createdBy           User?    @relation("ArticleCreator", fields: [createdByAdminId], references: [id])
  lastEditedBy        User?    @relation("ArticleEditor", fields: [lastEditedByAdminId], references: [id])

  // Relations
  personalizations    PersonalizedOutput[]                                          /// User personalizations of this article

  // Indexes for performance
  @@index([status, publishedAt])                                                    /// Published articles lookup
  @@index([category])                                                               /// Category filtering
  @@index([contentType])                                                            /// Content type filtering
  @@index([createdAt])                                                              /// Time-based queries
  @@map("articles")
}

/// PersonalizedOutput model represents AI-generated personalized versions of article content for paid users
/// Maps to "personalized_outputs" table in the database
model PersonalizedOutput {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique identifier for the personalization
  userId     String   @db.Uuid                                                /// User who owns this personalization
  articleId  String   @db.Uuid                                                /// Article being personalized

  // Personalized content (generated with user's TrueTone profile)
  personalizedKeyInsights   String[]   @default([])                           /// Personalized key insights
  personalizedVideoScript   String?                                           /// Personalized video script
  personalizedEmailTemplate String?                                           /// Personalized email template
  personalizedSocialContent Json?      @db.JsonB                              /// Personalized social media content

  // TrueTone snapshot at generation time
  truetoneSettings          Json?      @db.JsonB                              /// TrueTone settings used for generation

  // Usage tracking
  tokensUsed                Int?                                               /// AI tokens consumed for generation
  generationCount           Int        @default(1)                           /// Number of times regenerated
  lastGeneratedAt           DateTime   @default(now())                        /// Last generation timestamp
  createdAt                 DateTime   @default(now())                        /// First creation timestamp

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Constraints and indexes
  @@unique([userId, articleId])                                               /// One personalization per user per article
  @@index([userId])                                                           /// User personalizations lookup
  @@index([articleId])                                                        /// Article personalizations lookup
  @@index([lastGeneratedAt])                                                  /// Recent generations lookup
  @@map("personalized_outputs")
}

/// AnonymousAiUsage model tracks AI generation usage for non-authenticated users
/// Used to enforce free tier limits for anonymous users via session/IP tracking
/// Maps to "anonymous_ai_usage" table in the database
model AnonymousAiUsage {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// Unique identifier for the usage record
  sessionId       String    @unique @map("session_id")                              /// Client-generated session ID for tracking (unique for upserts)
  ipAddress       String?   @map("ip_address")                                      /// IP address for additional verification
  generationsUsed Int       @default(0) @map("generations_used")                    /// Number of AI generations used by this session
  createdAt       DateTime  @default(now()) @map("created_at")                      /// When the usage record was first created
  lastUsedAt      DateTime  @default(now()) @map("last_used_at")                    /// When the last generation was performed

  @@map("anonymous_ai_usage")
}