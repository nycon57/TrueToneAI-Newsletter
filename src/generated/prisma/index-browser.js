
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  company: 'company',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  kindeId: 'kindeId',
  categoryPreferences: 'categoryPreferences',
  tagPreferences: 'tagPreferences',
  savedArticleIds: 'savedArticleIds',
  toneOfVoice: 'toneOfVoice',
  humor: 'humor',
  detailOrientation: 'detailOrientation',
  contentLength: 'contentLength',
  formality: 'formality',
  emotionalExpression: 'emotionalExpression',
  vocabulary: 'vocabulary',
  engagementStyle: 'engagementStyle',
  subscriptionTier: 'subscriptionTier',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionExpiresAt: 'subscriptionExpiresAt',
  subscriptionCreatedAt: 'subscriptionCreatedAt',
  monthlyGenerationLimit: 'monthlyGenerationLimit',
  monthlyGenerationsUsed: 'monthlyGenerationsUsed',
  generationResetDate: 'generationResetDate',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePriceId: 'stripePriceId',
  hasCompletedOnboarding: 'hasCompletedOnboarding',
  onboardingStep: 'onboardingStep',
  onboardingCompletedAt: 'onboardingCompletedAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  publishedStatus: 'publishedStatus',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  postId: 'postId',
  contentId: 'contentId',
  contentType: 'contentType',
  contentTitle: 'contentTitle',
  deviceType: 'deviceType',
  timestamp: 'timestamp'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  countryCode: 'countryCode',
  region: 'region',
  city: 'city',
  startedAt: 'startedAt',
  lastActiveAt: 'lastActiveAt',
  endedAt: 'endedAt',
  pageViews: 'pageViews',
  eventsCount: 'eventsCount'
};

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  eventType: 'eventType',
  eventAction: 'eventAction',
  eventCategory: 'eventCategory',
  eventLabel: 'eventLabel',
  eventValue: 'eventValue',
  pagePath: 'pagePath',
  elementId: 'elementId',
  elementType: 'elementType',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.PageViewScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  pagePath: 'pagePath',
  pageTitle: 'pageTitle',
  referrer: 'referrer',
  timeOnPage: 'timeOnPage',
  scrollDepth: 'scrollDepth',
  exitPage: 'exitPage',
  bounce: 'bounce',
  timestamp: 'timestamp'
};

exports.Prisma.ChatAnalyticsScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  conversationId: 'conversationId',
  messageCount: 'messageCount',
  sessionDuration: 'sessionDuration',
  selectedArticle: 'selectedArticle',
  selectedContentType: 'selectedContentType',
  tokensUsed: 'tokensUsed',
  errorCount: 'errorCount',
  startedAt: 'startedAt',
  endedAt: 'endedAt'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  summary: 'summary',
  content: 'content',
  contentType: 'contentType',
  articleTopic: 'articleTopic',
  category: 'category',
  tags: 'tags',
  defaultKeyInsights: 'defaultKeyInsights',
  defaultVideoScript: 'defaultVideoScript',
  defaultEmailTemplate: 'defaultEmailTemplate',
  defaultSocialContent: 'defaultSocialContent',
  position: 'position',
  imageUrl: 'imageUrl',
  sourceUrl: 'sourceUrl',
  metadata: 'metadata',
  status: 'status',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  rejectionReason: 'rejectionReason',
  reviewNotes: 'reviewNotes',
  createdByAdminId: 'createdByAdminId',
  lastEditedByAdminId: 'lastEditedByAdminId'
};

exports.Prisma.PersonalizedOutputScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  articleId: 'articleId',
  personalizedKeyInsights: 'personalizedKeyInsights',
  personalizedVideoScript: 'personalizedVideoScript',
  personalizedEmailTemplate: 'personalizedEmailTemplate',
  personalizedSocialContent: 'personalizedSocialContent',
  truetoneSettings: 'truetoneSettings',
  tokensUsed: 'tokensUsed',
  generationCount: 'generationCount',
  lastGeneratedAt: 'lastGeneratedAt',
  createdAt: 'createdAt'
};

exports.Prisma.GenerationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  articleId: 'articleId',
  contentType: 'contentType',
  platform: 'platform',
  content: 'content',
  contentArray: 'contentArray',
  tokensUsed: 'tokensUsed',
  generatedAt: 'generatedAt',
  truetoneSnapshot: 'truetoneSnapshot'
};

exports.Prisma.AnonymousAiUsageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  ipAddress: 'ipAddress',
  generationsUsed: 'generationsUsed',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SubscriptionTier = exports.$Enums.SubscriptionTier = {
  FREE: 'FREE',
  PAID: 'PAID',
  PREMIUM: 'PREMIUM'
};

exports.PublishedStatus = exports.$Enums.PublishedStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.ContentType = exports.$Enums.ContentType = {
  ARTICLE: 'ARTICLE',
  KEY_INSIGHTS: 'KEY_INSIGHTS',
  VIDEO_SCRIPT: 'VIDEO_SCRIPT',
  EMAIL_TEMPLATE: 'EMAIL_TEMPLATE',
  SOCIAL_CONTENT: 'SOCIAL_CONTENT'
};

exports.Device = exports.$Enums.Device = {
  MOBILE: 'MOBILE',
  TABLET: 'TABLET',
  DESKTOP: 'DESKTOP',
  UNKNOWN: 'UNKNOWN'
};

exports.ArticleStatus = exports.$Enums.ArticleStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.GenerationContentType = exports.$Enums.GenerationContentType = {
  KEY_INSIGHTS: 'KEY_INSIGHTS',
  VIDEO_SCRIPT: 'VIDEO_SCRIPT',
  EMAIL_TEMPLATE: 'EMAIL_TEMPLATE',
  SOCIAL_MEDIA: 'SOCIAL_MEDIA'
};

exports.SocialPlatform = exports.$Enums.SocialPlatform = {
  FACEBOOK: 'FACEBOOK',
  INSTAGRAM: 'INSTAGRAM',
  TWITTER: 'TWITTER',
  LINKEDIN: 'LINKEDIN'
};

exports.Prisma.ModelName = {
  User: 'User',
  Post: 'Post',
  Like: 'Like',
  UserSession: 'UserSession',
  AnalyticsEvent: 'AnalyticsEvent',
  PageView: 'PageView',
  ChatAnalytics: 'ChatAnalytics',
  Article: 'Article',
  PersonalizedOutput: 'PersonalizedOutput',
  Generation: 'Generation',
  AnonymousAiUsage: 'AnonymousAiUsage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
